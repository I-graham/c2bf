WHITESPACE = _{ " " | "\t" | NEWLINE }

CONSTANT = @{ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) }

IDENTIFIER = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

primary_expr =
	{ CONSTANT
	| IDENTIFIER
	| "(" ~ expr ~ ")"
 	| "(" ~ type_name ~ ")" ~ "{" ~ initializer_list ~ ","? ~ "}"
	}

postfix_expr = { primary_expr ~ postfixture* }
	postfixture = _{ index | call | field | arrow | inc | dec }
	index = { "[" ~ expr ~ "]" }
	call = { "(" ~ ")" | "(" ~ assign_expr ~ ("," ~ assign_expr)* ~ ")" }
	field = { "." ~ IDENTIFIER }
	arrow = { "->" ~ IDENTIFIER }
	inc = { "++" }
	dec = { "--" }
	
unary_expr =
	{ postfix_expr
	| prefix_op ~ unary_expr
	| unary_operator ~ cast_expr
	| type_size_expr
	}

prefix_op =
	{ "++"
	| "--"
	| "sizeof"
	}

type_size_expr = { "sizeof" ~ "(" ~ type_name ~ ")" }

unary_operator =
	{ "&"
	| "*"
	| "+"
	| "-"
	| "~"
	| "!"
	}

cast_expr =
	{ unary_expr
	| "(" ~ type_name ~ ")" ~ cast_expr
	}

mul_expr = { cast_expr ~ (mul_op ~ cast_expr)* }
	mul_op = { "*" | "/" | "%" }

add_expr = { mul_expr ~ (add_op ~ mul_expr)* }
	add_op = { "+" | "-" }
	
shift_expr = { add_expr ~ (shift_op ~ add_expr)* }
	shift_op = { "<<" | ">>" }

rel_expr = { shift_expr ~ (rel_op ~ shift_expr)* }
	rel_op = { "<=" | ">=" | "<" | ">" }

eq_expr = {rel_expr ~ (eq_op ~ rel_expr)* }
	eq_op = { "==" | "!=" }
	
and_expr = {eq_expr ~ (and_op ~ eq_expr)* }
	and_op = {"&"}

xor_expr = {and_expr ~ (xor_op ~ and_expr)* }
	xor_op = {"^"}

ior_expr = {xor_expr ~ (ior_op ~ xor_expr)* }
	ior_op = {"|"}

land_expr = {ior_expr ~ (land_op ~ ior_expr)*}
	land_op = {"&&"}

lor_expr = {land_expr ~ (lor_op ~ land_expr)*}
	lor_op = {"||"}

conditional_expr =
	{ lor_expr ~ "?" ~ expr ~ "{" ~ conditional_expr
	| lor_expr
 	} 	

assign_expr =
	{ unary_expr ~ assign_op ~ assign_expr
	| conditional_expr
	}

assign_op =
	{ "="
	| "*="
	| "/="
	| "%="
	| "+="
	| "-="
	| "<<="
	| ">>="
	| "&="
	| "|="
	| "^="
	}

expr = {assign_expr ~ ("," ~ assign_expr)* }

const_expr = { conditional_expr }

declaration =
	{ typedef
	| static_spec? ~ vdecl
	}

vdecl = { ignored_specs ~ type_name ~ init_declarator_list ~ ";" }

ignored_specs = { (storage_class_specifier | type_qualifier | "inline")* }

static_spec = { "static" }

typedef =  { "typedef" ~ type_name ~ declarator ~ ("," ~ declarator )* ~ ";" }

init_declarator_list = { init_declarator ~ ("," ~ init_declarator_list)? }

init_declarator = { declarator ~ ("=" ~ initializer)? }

storage_class_specifier =
	{ "extern"
	| "static"
	| "register"
	}

type_specifier =
	{ "void"
	| "char"
	| "short"
	| "int"
	| "long"
	| "float"
	| "double"
	| "signed"
	| "unsigned"
	| struct_or_union_specifier
	| enum_specifier
	}

struct_or_union_specifier =
	{ struct_or_union ~ IDENTIFIER ~ "{" ~ struct_declaration_list ~ "}"
	| struct_or_union ~ "{" ~ struct_declaration_list ~ "}"
	| struct_or_union ~ IDENTIFIER
	}

struct_or_union =
	{ "struct"
	| "union"
	}

struct_declaration_list = { struct_declaration+ }

struct_declaration = { specifier_qualifier_list ~ struct_declarator_list ~ ";" }

specifier_qualifier_list = { (type_specifier | type_qualifier)+}

struct_declarator_list = { struct_declarator ~ ("," ~ struct_declarator)* }

struct_declarator =
	{ ":" ~ const_expr
	| declarator ~ ":" ~ const_expr
	| declarator
	}

enum_specifier =
	{ "enum" ~ "{" ~ enumerator_list ~ ","? ~ "}"
	| "enum" ~ IDENTIFIER ~ "{" ~ enumerator_list ~ ","? ~ "}"
	| "enum" ~ IDENTIFIER
	}

enumerator_list = { enumerator ~ ("," ~ enumerator)* }

enumerator =
	{ IDENTIFIER
	| IDENTIFIER ~ "=" ~ const_expr
	}

type_qualifier =
	{ "const"
	| "restrict"
	| "volatile"
	}

declarator =
	{ pointer ~ direct_declarator
	| direct_declarator
	}

direct_declarator = 
	{ IDENTIFIER ~ (sized | brackets | params | typequal)*
	| "(" ~ declarator ~ ")" ~ (sized | brackets | params | typequal)+
	}
	brackets = { "[" ~ "*"? ~ "]" }
	params   = { "(" ~ ( parameter_list )? ~ ")"}
	typequal =  { "[" ~ type_qualifier_list ~ "*"? ~ "]" }
	sized    =
		{ "[" ~ type_qualifier ~ "static" ~ assign_expr ~ "]" 
		| "[" ~ "static" ~ type_qualifier ~ assign_expr ~ "]"
		| "[" ~ type_qualifier ~ assign_expr ~ "]"
		| "[" ~ assign_expr ~ "]"
		}

pointer = { deref ~ (type_qualifier | deref)* }
	deref = {"*"}

type_qualifier_list = { type_qualifier+ }

parameter_list = _{ parameter_declaration ~ ("," ~ parameter_declaration)* }

parameter_declaration = _{ named_param | type_name }

named_param = { specifier_qualifier_list ~ declarator }

identifier_list = { IDENTIFIER ~ ("," ~ IDENTIFIER)* }

type_name =
	{ specifier_qualifier_list ~ abstract_declarator
	| specifier_qualifier_list
	| IDENTIFIER
	}

abstract_declarator =
	{ pointer ~ direct_abstract_declarator
	| pointer
	| direct_abstract_declarator
	}

direct_abstract_declarator =
	{ "(" ~ abstract_declarator ~ ")" ~ (brackets | const_sized | params)*
	| (brackets | const_sized | params)+
	}

const_sized = {"[" ~ const_expr ~ "]"}

initializer =
	{ "{" ~ initializer_list ~ ","? ~ "}"
	| assign_expr
	}

initializer_list = { initializer ~ ("," ~ initializer)* }

stmt =
	{ labeled_stmt
	| compound_stmt
	| selection_stmt
	| iteration_stmt
	| jump_stmt
	| print_stmt
	| expr_stmt
	}

print_stmt = { "print" ~ "(" ~ expr ~ ")" ~ ";"}

labeled_stmt =
	{ IDENTIFIER ~ ":" ~ stmt
	| case_stmt
	| default_stmt
	}

case_stmt    = { "case" ~ ":" ~ const_expr ~ ":" ~ stmt }
default_stmt = { "default" ~ ":" ~ stmt }

compound_stmt = { "{" ~ (stmt | declaration)* ~ "}" }

expr_stmt = { expr? ~ ";" }

selection_stmt = { if_stmt | switch_stmt }

if_stmt     = { "if" ~ "(" ~ expr ~ ")" ~ stmt ~ ("else" ~ stmt)? }
switch_stmt = { "switch" ~ "(" ~ expr ~ ")" ~ stmt }

iteration_stmt = { while_loop | do_loop | for_loop }

while_loop = { "while" ~ "(" ~ expr ~ ")" ~ stmt }
do_loop    = {"do" ~ stmt ~ "while" ~ "(" ~ expr ~ ")" ~ ";" }
for_loop   = { "for" ~ "(" ~ (expr_stmt | declaration) ~ expr_stmt ~ expr? ~ ")" ~ stmt }

jump_stmt     = { goto_stmt | continue_stmt | break_stmt | return_stmt }

goto_stmt     = { "goto" ~ IDENTIFIER ~ ";" }
continue_stmt = { "continue" ~ ";" }
break_stmt    = { "break" ~ ";" }
return_stmt   = { "return" ~ ";" | "return" ~ expr ~ ";" }

translation_unit = { SOI ~ external_declaration+ ~ EOI }

external_declaration = { function_definition | declaration }

function_definition = { ignored_specs ~ type_name ~ declarator ~ compound_stmt }
